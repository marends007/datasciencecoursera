6 == 7
6 < 7
10 <= 10
5 != 7
!5 == !7
5 != 7
5 !== 7
!5 == 7
F & F
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
TRUE || 5<9.3 || FALSE
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
1:20
pi:10
15:1
`:`
?`:`
seq(1, 20
seq(1, 20)
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2))
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x(x[0])
x[0]
x[3000]
x[c(-2, -10)]
x[c(2, 10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
split(x, f)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month) #split airquality data frame and split Month
lapply(s, function(x) colMean(x[, c("Ozone", "Solar.R", "Wind")]))
s <- split(airquality, airquality$Month) #split airquality data frame and split Month
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]), na.rm = TRUE)
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
x <- rnorm(10)
f1 <- gl(2, 5)
f2 <- gl(5, 2)
interaction(f1, f2)
str(split(x, list(f1, f2)))
str(split(x, list(f1, f2), drop = TRUE))
traceback(x)
library(datasets)
data(iris)
?iris
iris
iris[viriginica]
v <- list(a = Sepal.Length, b = viriginica)
lapply(v, mean)
v <- list(a = iris$Sepal.Length, b = viriginica)
lapply(v, mean)
v <- list(a = iris$Sepal.Length, b = iris$Species[101:150])
lapply(v, mean)
v <- list(a = iris$Sepal.Length[101:150])
lapply(v, mean)
v <- list(a = iris$Sepal.Length[101:150])
lapply(v, mean, round = 0)
v <- list(a = iris$Sepal.Length[101:150])
lapply(v, mean, round = 1)
v <- list(a = iris$Sepal.Length[101:150])
lapply(v, mean, round(v, digits = 0))
?round
v <- list(a = iris$Sepal.Length[101:150])
lapply(v, mean, round(iris$Sepal.Length[101:150], digits = 0))
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, probs = c(0.25, 0.75))
x <- matrix(rnorm(200), 20, 10) # 200 normal random variables w/ 20 rows, 10 columns
apply(x, 2, mean)
colMeans(iris)
colMeans(iris$Sepal.Length)
colMeans?
?colMeans
rowMeans(iris[,1:4])
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(mtcars)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21-82.63
install.packages(“ggplot2”)
install.packages(“swirl”)
install.packages("lattice")
install.packages("dplyr")
install.packages("swirl")
install.packages("ggplot2")
markdown?
install.packages("rmarkdown")
x <- 9
type(x)
typeof(x)
x <- 9
typeof(x)
x <- 10
typeof(x)
?typeof
x <- list(1:10, "hello", TRUE, 1+3i)
x
typeof(x)
cars
?cars
head(cars)
tail(cars)
dim(cars)
names(cars)
vector1 <- c(1:10, 25)
vector1
vector1[3] ##look at 3rd element
vector1[11] ## look at 11th element
x <- list(1:10, "hello", TRUE, 4)
x[[1]] ##pulls from first vector in the list
x[[1]][3] ##pulls out element 3 in vector 1
cars[1, ] ##look at just the first row
cars[5-10, ] ## look at rows 5-10
cars[ , 2] ## looks at second columns
cars[4, c("speed")] ## looks at 4th row in speed column
vector1 <- c(1:10, 25)
vector1
vector1[3] ##look at 3rd element
vector1[11] ## look at 11th element
x <- list(1:10, "hello", TRUE, 4)
x[[1]] ##pulls from first vector in the list
x[[1]][3] ##pulls out element 3 in vector 1
cars[1, ] ##look at just the first row
cars[5:10, ] ## look at rows 5-10
cars[ , 2] ## looks at second columns
cars[4, c("speed")] ## looks at 4th row in speed column
cars[4, c("speed")] ## looks at 4th row in speed column
vector1 <- c(1:10, 25)
vector1
vector1[3] ##look at 3rd element
vector1[11] ## look at 11th element
x <- list(1:10, "hello", TRUE, 4)
x[[1]] ##pulls from first vector in the list
x[[1]][3] ##pulls out element 3 in vector 1
cars[1, ] ##look at just the first row
cars[5:10, ] ## look at rows 5-10
cars[ , 2] ## looks at second columns
cars[4, c("speed")] ## looks at 4th row in speed column
myData <- read.csv("data.csv")
read.csv("mtcars")
mtcars
swirl
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt(z - 1)
my_sqrt <- z - 1
my_sqrt <- (z - 1)
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
con <- url("https://www.mcc.gov/where-we-work/program/zambia-compact", "r")
x <- readLines(con)
head(x)
install.packages("devtools")
library(devtools)
install.packages("KernSmooth")
library(KernSmooth)
find_rtools()
# if else or just if
if(x = 4){
# for loop
# i is a loop index that will cover a series of numbers
for(i in 1:10){
print i
# seq_along takes vector as input and creates integer sequence 1 through 4
x <- c("a", "b", "c", "d")
for(i in 1:4){
print(x[i])
}
## is the same as:
for(i in seq_along(x)){
print(x[i])
}
for(letter in x){
print(letter)
}
## while loop
# begin by testing a condition, if true they execute the loop body. Once the body is executed, the condition is tested again, and so forth
count <- 0
while(count < 0){
print(count)
count <- count + 1
}
while(count < 10){
print(count)
count <- count + 1
}
z <- 5
while(z >= 3 && z <= 10){
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1){## random walk
z <- z + 1
}else{
z <- z - 1
}
}
?rbinom
## First Function:
add2 <- function(x, y){
x + y
}
add2(3, 5)
columnmean <- function(x, removeNA = TRUE){ # x is a matrix
nc <- ncol(x) # figure out how many columns there is
means <- numeric(nc) # need to initilize the vector, must have the same number of values as the columns
for(i in 1:nc){ # creates integer vector
means[i] <- mean(x[,i], na.rm = removeNA) #assign to means vector the mean of x
}
means
}
columnmean(airquality)
args(lm)
args(paste)
args(cat)
search()
make.power <- function(n){ ## n is a free variable because it is not defined in the pow function - this is defining a function within a function
pow <- function(x){
x^n
}
pow
}
cube <- make.power(3)
square <- make.power(2)
ls(environment(cube))
?complete.cases
?nobs
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)){
params <- fixed ## logical vector that lets me fit parameters
function(p){ # this is parameter vector that I will optimize over - it will return log likelihood for normal distribution
params[!fixed] <- p
mu <- params[1] ## mean of normal dist
sigma <- params[2] # sd of normal dist
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2/(sigma^2))
-(a + b)
}
}
set.seed(1); normals <- rnorm(100, 1, 2) ## simulate random normal variables
nLL <- make.NegLogLik(normals)
nLL
optim(c(mu = 0, sigma = 1), nLL)$par
nLL <- make.NegLogLik(normals, c(1, FALSE))
x <- seq(1.7, 1.9, len = 100)
y <- sapply(x, nLL)
plot(x, exp(-(y - min(y))), type = "l")
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
ls(environment(h))
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
ls(environment(h))
pollutantmean <- function(specdata, pollutant, id = 1:332){
data = numeric() ##data is designated as numeric
for (i in id){
newRead = read.csv(paste(formatC(i, width = 3, flag = "0"),
".csv", sep = "")) ##renames csv file to be readable
## width must = 3 for this because file is 001.csv with 3 referring
## to 001. Any other number will return an error because it cant read
## anything more or less than the three digits
### flag = "0" pads the zeros in 001.csv so that they do not disapprear
data = c(data, newRead[[pollutant]])
}
return(mean(data, na.rm = TRUE))
}
pollutantmean("specdata", "sulfate", 1:10)
setwd("~/Course Trainings/John Hopkins Data Science Boot Camp/JHU Working Directory/specdata")
pollutantmean <- function(specdata, pollutant, id = 1:332){
data = numeric() ##data is designated as numeric
for (i in id){
newRead = read.csv(paste(formatC(i, width = 3, flag = "0"),
".csv", sep = "")) ##renames csv file to be readable
## width must = 3 for this because file is 001.csv with 3 referring
## to 001. Any other number will return an error because it cant read
## anything more or less than the three digits
### flag = "0" pads the zeros in 001.csv so that they do not disapprear
data = c(data, newRead[[pollutant]])
}
return(mean(data, na.rm = TRUE))
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10, round = 3)
pollutantmean("specdata", "sulfate", 1:10, round(specdata,3)
?paste
?formatC
pollutantmean("specdata", "sulfate", 1:10, round(specdata,3))
pollutantmean("specdata", "sulfate", 1:10, round(specdata,3))
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
pollutantmean("specdata", "nitrate")
pollutantmean("specdata", "nitrate", round(newRead, 3))
round(pollutantmean("specdata", "nitrate"), 3)
complete <- function(specdata, id = 1:332){
nobs = numeric()
for (i in id){
newRead = read.csv(paste(formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
nobs = c(nobs, sum(complete.cases(newRead)))
}
return(data.frame(id, nobs))
}
complete("specdata", c(2, 4, 8, 10, 12))
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
corr <- function(specdata, threshold = 0) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
## 'threshold' is a numeric vector of length 1 indicating the number of
## completely observed observations (on all variables) required to compute
## the correlation between nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
df = complete(specdata)
ids = df[df["nobs"] > threshold, ]$id
corr = numeric()
for (i in ids){
newRead = read.csv(paste(formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
dff = newRead[complete.cases(newRead), ]
corr = c(corr, cor(dff$sulfate, dff$nitrate))
}
return(corr)
}
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
lm(lapply)
lapply
x <- list(a = 1.5, b= rnorm(10))
lappy(x, mean)
lapply(x, mean)
x <- 1:4
lapply(x, runif)
lapply(x, runif, min = 0, max = 10)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(elt) elt[,1])
sapply(x, mean)
str(apply)
x <- matrix(rnorm(200, 20, 10))
apply(x, 2, mean)
apply(x, 1, quantile, probs = c(0.25, 0.75))
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
apply(a, c(1,2), mean)
rowMeans(a, dim = 10)
rowMeans(a, dim = 2)
str(mapply)
list(rep(1, 4), rep(2, 3), rep(3,2), rep(4,1))
mapply(rep, 1:4, 4:1)
noise <- function(n ,mean, sd){
rnorm(n, mean, sd)
}
noise(5, 1, 2)
mapply(noise, 1:5, 1:5, 2)
str(tapply)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
f
tapply(x, f, mean)
tapply(x, f, mean, simplify = FALSE)
tapply(x, f, range)
str(split)
x <- c(rnorm(10), runif(10), rnorm(10, 1)) # simulated vector of normal (rnorm) and uniform (runif) random variables. "rnorm(10, 1)" is 10 normal random variables all with a mean of 1
f <- gl(3, 10) ## gl creates a factor variable - 10 1's, 10 2's and 10 3's
split(x, f)
lapply(split(x, f), mean)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
?gl
interaction(f1, f2)
x <- rnorm(10)
f1 <- gl(2, 5)
f2 <- gl(5, 2)
interaction(f1, f2)
str(split(x, list(f1, f2)))
str(split(x, list(f1, f2), drop = TRUE))
