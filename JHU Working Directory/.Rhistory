while(count < 10){
print(count)
count <- count + 1
}
z <- 5
while(z >= 3 && z <= 10){
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1){## random walk
z <- z + 1
}else{
z <- z - 1
}
}
?rbinom
## First Function:
add2 <- function(x, y){
x + y
}
add2(3, 5)
columnmean <- function(x, removeNA = TRUE){ # x is a matrix
nc <- ncol(x) # figure out how many columns there is
means <- numeric(nc) # need to initilize the vector, must have the same number of values as the columns
for(i in 1:nc){ # creates integer vector
means[i] <- mean(x[,i], na.rm = removeNA) #assign to means vector the mean of x
}
means
}
columnmean(airquality)
args(lm)
args(paste)
args(cat)
library(swirl)
swirl()
==
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!5 = !7
5 != 7
5 !== 7
5 !== 7
5 ==! 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
# You're about to write your first function! Just like you would assign a value
# to a variable with the assignment operator, you assign functions in the following
# way:
#
# function_name <- function(arg1, arg2){
#	# Manipulate arguments in some way
#	# Return a value
# }
#
# The "variable name" you assign will become the name of your function. arg1 and
# arg2 represent the arguments of your function. You can manipulate the arguments
# you specify within the function. After sourcing the function, you can use the
# function by typing:
#
# function_name(value1, value2)
#
# Below we will create a function called boring_function. This function takes
# the argument `x` as input, and returns the value of x without modifying it.
# Delete the pound sign in front of the x to make the function work! Be sure to
# save this script and type submit() in the console after you make your changes.
boring_function <- function(x) {
x
}
submit()
boring_function <- function(x) {
x
}
submit()
submit()
submit()
submit()
boring_function <- function(x) {
x
}
submit()
boring_function <- function(x) {
x
}
boring_function <- function(x) {
x
}
submit()
exit()
exit
quit
submit()
boring_function('My first function!')
boring_function()
boring_function
my_mean <- function(my_vector) {
my_vector <- sum(c(1, 2, 3)) / length(c(1, 2, 3))
mean(my_vector)
# Remember: the last expression evaluated will be returned!
}
my_mean(4)
my_mean(5)
my_mean <- function(my_vector) {
my_vector <- sum(c(1, 2, 3)) / length(c(1, 2, 3))
mean
# Remember: the last expression evaluated will be returned!
}
my_mean(4)
my_mean <- function(my_vector) {
my_vector <- sum(c(1, 2, 3)) / length(c(1, 2, 3))
}
submit()
my_mean <- function(my_vector) {
x <- sum(c(1, 2, 3))
y <- length(c(1, 2, 3))
x / y
}
submit
submit()
my_mean <- function(my_vector) {
x <- sum(c(1, 2, 3))
y <- length(c(1, 2, 3))
x / y
}
submit()
my_mean <- function(my_vector) {
x <- sum(c(1, 2, 3))
y <- length(c(1, 2, 3))
my_vector <- x / y
}
my_mean(my_vector)
my_mean <- function(my_vector) {
x <- sum(c(1, 2, 3))
y <- length(c(1, 2, 3))
x / y
}
my_mean(my_vector)
my_mean <- function(my_vector) {
x <- sum(c(1, 2, 3))
y <- length(c(1, 2, 3))
x / y
}
my_mean(my_vector)
submit()
my_mean <- function(my_vector) {
x <- sum(c(1, 2, 3))
y <- length(c(1, 2, 3))
x / y
}
submit()
submit()
my_mean <- function(my_vector) {
x <- sum(my_vector)
y <- length(my_vector)
x / y
}
my_mean(my_vector)
my_mean(2, 4)
my_mean <- function(my_vector){
sum(c(4, 2, 5, 8, 9, 9)) / length(c(4, 2, 5, 8, 9, 9))
}
my_mean()
submit
submit()
my_mean <- function(my_vector){
sum(c(4, 2, 5, 8, 9, 9)) / length(c(4, 2, 5, 8, 9, 9))
}
my_mean()
submit()
my_mean <- function(my_vector){
x <- sum(c(4, 2, 5, 8, 9, 9))
y <- length(c(4, 2, 5, 8, 9, 9))
x / y
}
my_mean()
submit()
my_mean <- function(my_vector){
sum(my_vector)/ length(my_vector)
}
my_mean()
my_mean <- function(my_vector){
sum(my_vector)/ length(my_vector)
}
my_mean()
my_mean <- function(my_vector){
sum(my_vector)/ length(my_vector)
}
submit()
my_mean(c(4, 5, 10))
remainder <- function(num, divisor) {
num %% divisor
# Remember: the last expression evaluated will be returned!
}
submit()
remainder <- function(num, divisor = 2) {
num %% divisor
# Remember: the last expression evaluated will be returned!
}
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
evaluate <- function(func, dat){
func(dat)
# Remember: the last expression evaluated will be returned!
}
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd(c(1.4, 3.6, 7.9, 8.8)))
evaluate <- function(func, dat){
func(dat)
# Remember: the last expression evaluated will be returned!
}
sd(evaluate(c(1.4, 3.6, 7.9, 8.8)))
evaluate(sd(),c(1.4, 3.6, 7.9, 8.8)))
evaluate(sd(),c(1.4, 3.6, 7.9, 8.8))
evaluate(sd(evaluate),c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function[1],c(8, 4, 0))
evaluate(function(x[1]),c(8, 4, 0))
evaluate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[3]},c(8, 4, 0))
evaluate(function(x){x(length[x])},c(8, 4, 0))
evaluate(function(x){x[lengthx]},c(8, 4, 0))
evaluate(function(x){x[length(x)]},c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
telegram <- function(...){
paste("START", "Good", "Morning", "STOP")
}
submit()
telegram <- function(...){
paste("START", ..., "STOP", sep = " ")
}
submit()
telegram("Poop", "Poop")
mad_libs <- function(...){
args <- list(...)
place <- args[[place]]
noun <- args[[noun]]
adjective <- args[[adjective]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs <- function(...){
args <- list(...)
place <- args[[place]]
adjective <- args[[adjective]]
noun <- args[[noun]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs <- function(...){
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun""]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs <- function(...){
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs("NYC", "smells", "dogs")
"%p%" <- function(left, right){ # Remember to add arguments!
left & right
}
submit()
"%p%" <- function(left, right){ # Remember to add arguments!
paste(left, right, sep = " ")
}
submit()
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
di
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time(d1)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekday(d1)
weekdays(d1)
months(t1)
quarter(t2)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(shape_mat, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
tapply(iris, mean)
mean(iris$Sepal.Length[virginica])
head(iris)
lapply(iris, Sepal.length, virginica, mean)
lapply(iris$Sepal.length, iris$species[virginica], mean)
head(iris)
sapply(iris$Species, unique)
round(mean(iris[which(iris$Species == "virginica"),]$Sepal.Length))
apply(iris[,1:4], 1, mean)
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$mpg, mtcars$cyl[4]), mean)
sapply(split(mtcars$mpg, mtcars$cyl[which(mtcars$cyl == "4"),]), mean)
sapply(split(mtcars$mpg, mtcars$cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
new <- tapply(mtcars$hp, mtcars$cyl, mean)
round(abs(new[3]-new[1]))
new
debug(ls)
Browse[2]> undebug(ls)
Browse[2]> Q
Browse[2]> undebug(ls)
Browse[2]> Q
undebug(ls)
undebug(ls)
Quit
debuggingState(on=FALSE)
q
library(twitteR)
install.packages(twitteR)
install.packages(ROAuth)
install.packages(httr)
library(ROAuth)
install.packages(twitteR)
install.packages("twitteR"")
install.packages(ROAuth)
install.packages(httr)
library(twitteR)
library(ROAuth)
library(httr)
# Set API Keys
api_key <- "xxxxxxxxxxxxxxxxxxxx"
install.packages("twitteR")
install.packages("twitteR")
install.packages("ROAuth")
install.packages("httr")
library(twitteR)
library(ROAuth)
library(httr)
api_key <- "W7mJAS6JwwAIhfyW6hbjowCZx"
api_secret <- "cjT0NsuIAe2XrAoUjrqY1KcxmXSxjwh2InHDCRscS2Og2oZHXz"
api_key <- "W7mJAS6JwwAIhfyW6hbjowCZx"
api_secret <- "cjT0NsuIAe2XrAoUjrqY1KcxmXSxjwh2InHDCRscS2Og2oZHXz"
access_token <- "435115675-UFuezo1zINmJbiWCErBCVQpvyBZQ7mowQ9Hr3OPC"
access_token_secret <- "Z6ycHfDmY5Bc15nvA6Fmu32JNHTxjpBnRx2OXBsBrLBbK"
setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)
api_key <- "W7mJAS6JwwAIhfyW6hbjowCZx"
api_secret <- "cjT0NsuIAe2XrAoUjrqY1KcxmXSxjwh2InHDCRscS2Og2oZHXz"
access_token <- "435115675-UFuezo1zINmJbiWCErBCVQpvyBZQ7mowQ9Hr3OPC"
access_token_secret <- "Z6ycHfDmY5Bc15nvA6Fmu32JNHTxjpBnRx2OXBsBrLBbK"
setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)
fileURL <- "https://data.baltimorecity.gov/api/views/aqgr-xx9h/rows.csv?accessType=DOWNLOAD"
download.file(fileURL, destfile = "./data/cameras.csv", method = "curl")
fileURL <- "https://data.baltimorecity.gov/api/views/aqgr-xx9h/rows.csv?accessType=DOWNLOAD"
download.file(fileURL, destfile = "./data/cameras.csv")
getwd()
setwd("~/Course Trainings/John Hopkins Data Science Boot Camp/JHU Working Directory")
download.file(fileURL, destfile = "./JHU Working Directory/Baltimore City Data.csv")
getwd()
download.file(fileURL, destfile = "./Users/marends/Documents/Course Trainings/John Hopkins Data Science Boot Camp/JHU Working Directory")
download.file(fileURL, destfile = "./Users/marends/Documents/Course Trainings/John Hopkins Data Science Boot Camp/JHU Working Directory.csv")
download.file(fileURL, destfile = "cameras.csv")
list.files("./data")
list.files("cameras.csv")
if (!file.exists("data")) { file.create("data") }
file.exists("./data")
download.file(fileURL, destfile = "./data/cameras.csv")
if (!file.exists("data/cameras.csv")) { file.create("data/cameras.csv") }
download.file(fileURL, destfile = "./data")
list.files("./data")
download.file(fileURL, destfile = "./data/cameras.csv")
getwd()
download.file(fileURL, destfile = "C:/Users/marends/Documents/Course Trainings/John Hopkins Data Science Boot Camp/JHU Working Directory/cameras.csv")
list.files("./data")
list.files("C:/Users/marends/Documents/Course Trainings/John Hopkins Data Science Boot Camp/JHU Working Directory")
dateDownloaded
dateDownloaded <- date()
dateDownloaded
cameraData <- read.table("cameras.csv", sep = ",", header = TRUE)
head(cameraData)
fileXLSX <- "https://data.baltimorecity.gov/api/views/aqgr-xx9h/rows.csv?accessType=DOWNLOAD&bom=true&format=true"
download.file(fileXLSX, destfile = "C:/Users/marends/Documents/Course Trainings/John Hopkins Data Science Boot Camp/JHU Working Directory/cameras2.csv")
list.files("C:/Users/marends/Documents/Course Trainings/John Hopkins Data Science Boot Camp/JHU Working Directory")
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(rJava)
java -d64 -version
system("java -version")
require(xlsx)
install.packages("rJava")
library(xlsx)
install.packages("xlsxjars")
install.packages("xlsxjars")
library(rJava)
library(xlsx)
library(xlsxjars)
library(xlsx)
cameraData2 <- read.xlsx("C:/Users/marends/Documents/Course Trainings/John Hopkins Data Science Boot Camp/JHU Working Directory/cameras2.csv", sheetIndex = 1, header = TRUE)
cameraData2 <- read.xlsx("cameras2.csv", sheetIndex = 1, header = TRUE)
install.packages("openxlsx")
library(openxlsx)
cameraData2 <- read.xlsx("cameras2.csv", sheetIndex = 1, header = TRUE)
cameraData2 <- read.xlsx("cameras2.csv")
cameraData2 <- read.xlsx("cameras2.csv",sheetIndex = 1, header = TRUE)
cameraData2 <- read.xls("cameras2.csv",sheetIndex = 1, header = TRUE)
cameraData2 <- read.xlsx("cameras2.csv",sheet = 1, header = TRUE)
cameraData2 <- read.xlsx("cameras2.csv",sheet = 1, colNames = TRUE)
fileXLSX <- "https://data.baltimorecity.gov/api/views/aqgr-xx9h/rows.csv?accessType=DOWNLOAD&bom=true&format=true"
download.file(fileXLSX, destfile = "C:/Users/marends/Documents/Course Trainings/John Hopkins Data Science Boot Camp/JHU Working Directory/cameras2.xlsx")
list.files("C:/Users/marends/Documents/Course Trainings/John Hopkins Data Science Boot Camp/JHU Working Directory")
downloadedDate2 <- date()
cameraData2 <- read.xlsx("cameras2.xlsx",sheet = 1, colNames = TRUE)
cameraData2 <- read.xlsx("cameras2.xlsx",sheet = 1,)
cameraData2 <- read.csv("cameras2.xlsx")
